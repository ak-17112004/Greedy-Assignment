Given a string S of length N consisting of ‘x’ and ‘.’. The given string represents a row of seats where ‘x’ and ‘.’ represent occupied and unoccupied seats respectively.
The task is to minimize the total number of hops or jumps to make all the occupants sit together i.e., next to each other, without having any vacant seat between them. 
Note: Since the count of jumps can be very large, print the answer modulo 109 + 7.
CODE:
def minJumps(seats):
	position = []
	count = 0
	lenn = len(seats)
	for i in range(lenn):
		if (seats[i] == 'x'):
			position.append(i - count)
			count += 1
	if (count == lenn or count == 0):
		return 0
	med_index = (count - 1) // 2
	med_val = position[med_index]
	ans = 0
	for i in range(len(position)):
		ans = (ans % MOD +
			abs(position[i] - med_val)
			% MOD) % MOD
	return ans % MOD
if __name__ == '__main__':
	S = "....x..xx...x.."
	print(minJumps(S))
